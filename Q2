% River Crossing Problem:
% A man, a woman, and two children need to cross a river using a boat.
% The boat can carry up to 100 kg. The man and the woman each weigh 80 kg,
% and the two children each weigh 30 kg.

% Facts: weights of the people
weight(man, 80).
weight(woman, 80).
weight(child1, 30).
weight(child2, 30).

% Initial state: everyone is on the left bank of the river
% state(left bank, list of people on left bank, list of people on right bank)
initial(state(left, [man, woman, child1, child2], [])).

% Goal state: everyone has crossed to the right bank
goal(state(right, [], [man, woman, child1, child2])).

% Predicate: move from one bank to the other
% move(current state, next state, list of people who cross the river)
move(state(left, LeftBank, RightBank), state(right, NewLeftBank, NewRightBank), People) :-
    select_people(People, LeftBank, NewLeftBank), % Select people from LeftBank to move
    valid(People), % Check that the selected people don't exceed the boat's weight limit
    append(People, RightBank, NewRightBank). % Add selected people to the RightBank

move(state(right, LeftBank, RightBank), state(left, NewLeftBank, NewRightBank), People) :-
    select_people(People, RightBank, NewRightBank), % Select people from RightBank to move
    valid(People), % Check that the selected people don't exceed the boat's weight limit
    append(People, LeftBank, NewLeftBank). % Add selected people to the LeftBank

% Predicate: select up to two people from a bank to move in the boat
% select_people(list of selected people, bank, remaining people on the bank)
select_people([A, B], Bank, NewBank) :- select(A, Bank, TempBank), select(B, TempBank, NewBank). % Two people
select_people([A], Bank, NewBank) :- select(A, Bank, NewBank). % One person

% Predicate: check if the total weight of selected people is within the boat's capacity (<= 100 kg)
valid(People) :- total_weight(People, W), W =< 100.

% Predicate: calculate the total weight of selected people
% total_weight(list of people, total weight)
total_weight([], 0). % Base case: no people, weight is 0
total_weight([Person|Rest], TotalWeight) :-
    weight(Person, W), % Get the weight of the first person
    total_weight(Rest, RestWeight), % Recursively calculate the total weight of the remaining people
    TotalWeight is W + RestWeight. % Sum the weights

% Solving the problem: find the sequence of moves to reach the goal
solve(State, [State]) :- goal(State). % Base case: if the current state is the goal, we are done
solve(State, [State|Rest]) :- 
    move(State, NextState, _), % Find a valid move to the next state
    solve(NextState, Rest). % Recursively solve the problem from the next state

% To solve the problem, run the query:
% ?- initial(State), solve(State, Moves).
% This will give you the sequence of states (Moves) showing how everyone crosses the river.
